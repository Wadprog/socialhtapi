"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetPasswordSchema = exports.forgotPasswordSchema = exports.getUserSchema = exports.UserSchema = exports.createUserSchema = exports.createUser = void 0;
var zod_1 = require("zod");
exports.createUser = (0, zod_1.object)({
    firstName: (0, zod_1.string)({
        required_error: 'Please provide a first name',
    }),
    lastName: (0, zod_1.string)({
        required_error: 'Please provide a last name',
    }),
    email: (0, zod_1.string)({
        required_error: 'You must provide a valid email address',
    }).email('The email address you provided is not a valid email'),
    password: (0, zod_1.string)({
        required_error: 'You must provide a valid password',
    }).min(6, 'Password is too short - should be min 6 characters'),
    passwordConfirmation: (0, zod_1.string)({
        required_error: 'Password confirmation is required',
    }),
}).refine(function (data) { return data.password === data.passwordConfirmation; }, {
    message: 'Passwords do not match',
    path: ['passwordConfirmation'],
});
exports.createUserSchema = (0, zod_1.object)({
    body: exports.createUser
});
exports.UserSchema = zod_1.z.object({
    id: zod_1.z.number(),
    emailVerificationkey: (0, zod_1.string)(),
    firstName: (0, zod_1.string)(),
    lastName: (0, zod_1.string)(),
    email: (0, zod_1.string)().email(),
    password: (0, zod_1.string)().min(6),
});
exports.getUserSchema = (0, zod_1.object)({
    params: (0, zod_1.object)({
        id: (0, zod_1.string)(),
    }),
});
exports.forgotPasswordSchema = (0, zod_1.object)({
    body: (0, zod_1.object)({
        email: (0, zod_1.string)({
            required_error: 'Email is required',
        }).email('Not a valid email'),
    }),
});
exports.resetPasswordSchema = (0, zod_1.object)({
    params: (0, zod_1.object)({
        id: (0, zod_1.string)(),
        resetPasswordKey: (0, zod_1.string)(),
    }),
    body: (0, zod_1.object)({
        password: (0, zod_1.string)({
            required_error: 'Password is required',
        }).min(6, 'Password is too short - should be min 6 chars'),
        passwordConfirmation: (0, zod_1.string)({
            required_error: 'Password confirmation is required',
        }),
    }).refine(function (data) { return data.password === data.passwordConfirmation; }, {
        message: 'Passwords do not match',
        path: ['passwordConfirmation'],
    }),
});
